import scala.collection.mutable

object Euler002 {
  def main(args: Array[String]): Unit = {
    println(
      """
        |Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        |
        |1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        |
        |By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
      """.stripMargin)
    println(s"solution: $solution")
  }

  def solution: Long = {
    def fibonacci(i: Long): Long = {
      if (i == 0) 1
      else if (i == 1) 1
      else fibonacci(i - 1) + fibonacci(i - 2)
    }

    def isEven(x: Long) = x % 2 == 0

    Stream
      .from(1)
      .map(_.toLong)
      .map(fibonacci)
      .filter(isEven)
      .takeWhile(_ < 4000000)
      .sum
  }

  def iterativeSolution: Long = {
    def isEven(x: Long) = x % 2 == 0

    var sum = 0
    var fibonacci = 1
    var previousFibonacci = 0
    while (fibonacci < 4000000) {
      if (isEven(fibonacci)) sum += fibonacci
      val nextFibonacci = fibonacci + previousFibonacci

      previousFibonacci = fibonacci
      fibonacci = nextFibonacci
    }
    sum
  }

}
